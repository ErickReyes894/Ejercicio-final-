import time
import numpy as np
import matplotlib.pyplot as plt

def is_valid(board, row, col, num):
    """Check if placing num at (row, col) is valid."""
    # Check row
    if num in board[row]:
        return False
    # Check column
    if num in board[:, col]:
        return False
    # Check 3x3 subgrid
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    if num in board[start_row:start_row+3, start_col:start_col+3]:
        return False
    return True

def solve_sudoku(board):
    """Solve the Sudoku using a DP-inspired approach."""
    for row in range(9):
        for col in range(9):
            if board[row, col] == 0:  # Find an empty cell
                for num in range(1, 10):  # Try numbers 1-9
                    if is_valid(board, row, col, num):
                        board[row, col] = num  # Tentatively place the number
                        if solve_sudoku(board):  # Recursively attempt to solve
                            return True
                        board[row, col] = 0  # Backtrack if it doesn't work
                return False  # No valid number found, backtrack
    return True  # Solved

def plot_sudoku(board):
    """Plot the Sudoku board."""
    fig, ax = plt.subplots(figsize=(6, 6))
    ax.matshow(np.ones((9, 9)), cmap="gray", alpha=0.1)
    
    for i in range(9):
        for j in range(9):
            if board[i, j] != 0:
                ax.text(j, i, str(board[i, j]), va='center', ha='center', fontsize=14)
    
    # Draw grid lines
    for i in range(10):
        lw = 2 if i % 3 == 0 else 0.5
        ax.axhline(i - 0.5, color='black', lw=lw)
        ax.axvline(i - 0.5, color='black', lw=lw)
    
    ax.axis('off')
    plt.show()

# Main process
initial_board = np.zeros((9, 9), dtype=int)
print("Introduce un número inicial para el Sudoku (formato: fila columna valor). Ejemplo: '1 1 5'. Escribe '0 0 0' para finalizar:")
while True:
    try:
        row, col, val = map(int, input("Introduce los valores: ").split())
        if row == 0 and col == 0 and val == 0:
            break
        if 1 <= row <= 9 and 1 <= col <= 9 and 1 <= val <= 9:
            if is_valid(initial_board, row-1, col-1, val):
                initial_board[row-1, col-1] = val
            else:
                print("Movimiento inválido. Prueba con otro número.")
        else:
            print("Por favor, introduce valores entre 1 y 9.")
    except ValueError:
        print("Formato incorrecto. Introduce tres números separados por espacios.")

print("Tablero inicial:")
plot_sudoku(initial_board)

start_time = time.time()
if solve_sudoku(initial_board):
    end_time = time.time()
    print("¡Sudoku resuelto en {:.4f} segundos!".format(end_time - start_time))
    plot_sudoku(initial_board)
else:
    print("No se pudo resolver el Sudoku.")